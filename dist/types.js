"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Type;
(function (Type) {
    Type["Boolean"] = "Boolean";
    Type["Integer"] = "Integer";
    Type["Float"] = "Float";
    Type["String"] = "String";
    Type["Array"] = "Array";
    Type["Map"] = "Map";
    Type["Bytes"] = "Bytes";
    Type["Result"] = "Result";
})(Type = exports.Type || (exports.Type = {}));
var Reducer;
(function (Reducer) {
    Reducer[Reducer["min"] = 0] = "min";
    Reducer[Reducer["max"] = 1] = "max";
    Reducer[Reducer["mode"] = 2] = "mode";
    Reducer[Reducer["averageMean"] = 3] = "averageMean";
    Reducer[Reducer["averageMeanWeighted"] = 4] = "averageMeanWeighted";
    Reducer[Reducer["averageMedian"] = 5] = "averageMedian";
    Reducer[Reducer["averageMedianWeighted"] = 6] = "averageMedianWeighted";
    Reducer[Reducer["deviationStandard"] = 7] = "deviationStandard";
    Reducer[Reducer["deviationAverage"] = 8] = "deviationAverage";
    Reducer[Reducer["deviationMedian"] = 9] = "deviationMedian";
    Reducer[Reducer["deviationMaximum"] = 10] = "deviationMaximum";
})(Reducer = exports.Reducer || (exports.Reducer = {}));
var Filter;
(function (Filter) {
    Filter[Filter["greaterThan"] = 0] = "greaterThan";
    Filter[Filter["LessThan"] = 1] = "LessThan";
    Filter[Filter["equals"] = 2] = "equals";
    Filter[Filter["deviationAbsolute"] = 3] = "deviationAbsolute";
    Filter[Filter["deviationRelative"] = 4] = "deviationRelative";
    Filter[Filter["deviationStandard"] = 5] = "deviationStandard";
    Filter[Filter["top"] = 6] = "top";
    Filter[Filter["bottom"] = 7] = "bottom";
    Filter[Filter["lessOrEqualThan"] = 128] = "lessOrEqualThan";
    Filter[Filter["greaterOrEqualThan"] = 129] = "greaterOrEqualThan";
    Filter[Filter["notEquals"] = 130] = "notEquals";
    Filter[Filter["notDeviationAbsolute"] = 131] = "notDeviationAbsolute";
    Filter[Filter["notDeviationRelative"] = 132] = "notDeviationRelative";
    Filter[Filter["notDeviationStandard"] = 133] = "notDeviationStandard";
    Filter[Filter["notTop"] = 134] = "notTop";
    Filter[Filter["notBottom"] = 135] = "notBottom";
})(Filter = exports.Filter || (exports.Filter = {}));
var OutputType;
(function (OutputType) {
    OutputType["Boolean"] = "boolean";
    OutputType["Integer"] = "integer";
    OutputType["Float"] = "float";
    OutputType["String"] = "string";
    OutputType["Array"] = "array";
    OutputType["Map"] = "map";
    OutputType["Bytes"] = "bytes";
    OutputType["Result"] = "result";
    OutputType["Inner"] = "inner";
    OutputType["Argument"] = "argument";
    OutputType["Passthrough"] = "passthrough";
})(OutputType = exports.OutputType || (exports.OutputType = {}));
var MarkupHierarchicalType;
(function (MarkupHierarchicalType) {
    MarkupHierarchicalType["Operator"] = "operator";
    MarkupHierarchicalType["SelectedOperatorOption"] = "selectedOperatorOption";
    MarkupHierarchicalType["OperatorOption"] = "operatorOption";
    MarkupHierarchicalType["Argument"] = "argument";
})(MarkupHierarchicalType = exports.MarkupHierarchicalType || (exports.MarkupHierarchicalType = {}));
var MarkupType;
(function (MarkupType) {
    MarkupType["Select"] = "select";
    MarkupType["Option"] = "option";
    MarkupType["Input"] = "input";
})(MarkupType = exports.MarkupType || (exports.MarkupType = {}));
var OperatorCode;
(function (OperatorCode) {
    OperatorCode[OperatorCode["BooleanMatch"] = 16] = "BooleanMatch";
    OperatorCode[OperatorCode["BooleanNegate"] = 17] = "BooleanNegate";
    OperatorCode[OperatorCode["BooleanAsString"] = 18] = "BooleanAsString";
    OperatorCode[OperatorCode["IntegerAbsolute"] = 32] = "IntegerAbsolute";
    OperatorCode[OperatorCode["IntegerAsBytes"] = 33] = "IntegerAsBytes";
    OperatorCode[OperatorCode["IntegerAsFloat"] = 34] = "IntegerAsFloat";
    OperatorCode[OperatorCode["IntegerAsString"] = 35] = "IntegerAsString";
    OperatorCode[OperatorCode["IntegerGreaterThan"] = 36] = "IntegerGreaterThan";
    OperatorCode[OperatorCode["IntegerLessThan"] = 37] = "IntegerLessThan";
    OperatorCode[OperatorCode["IntegerMatch"] = 38] = "IntegerMatch";
    OperatorCode[OperatorCode["IntegerModulo"] = 39] = "IntegerModulo";
    OperatorCode[OperatorCode["IntegerMultiply"] = 40] = "IntegerMultiply";
    OperatorCode[OperatorCode["IntegerNegate"] = 41] = "IntegerNegate";
    OperatorCode[OperatorCode["IntegerPower"] = 42] = "IntegerPower";
    OperatorCode[OperatorCode["IntegerReciprocal"] = 43] = "IntegerReciprocal";
    OperatorCode[OperatorCode["IntegerSum"] = 44] = "IntegerSum";
    OperatorCode[OperatorCode["FloatAbsolute"] = 48] = "FloatAbsolute";
    OperatorCode[OperatorCode["FloatAsBytes"] = 49] = "FloatAsBytes";
    OperatorCode[OperatorCode["FloatAsString"] = 50] = "FloatAsString";
    OperatorCode[OperatorCode["FloatCeiling"] = 51] = "FloatCeiling";
    OperatorCode[OperatorCode["FloatGraterThan"] = 52] = "FloatGraterThan";
    OperatorCode[OperatorCode["FloatFloor"] = 53] = "FloatFloor";
    OperatorCode[OperatorCode["FloatLessThan"] = 54] = "FloatLessThan";
    OperatorCode[OperatorCode["FloatModulo"] = 55] = "FloatModulo";
    OperatorCode[OperatorCode["FloatMultiply"] = 56] = "FloatMultiply";
    OperatorCode[OperatorCode["FloatNegate"] = 57] = "FloatNegate";
    OperatorCode[OperatorCode["FloatPower"] = 58] = "FloatPower";
    OperatorCode[OperatorCode["FloatReciprocal"] = 59] = "FloatReciprocal";
    OperatorCode[OperatorCode["FloatRound"] = 60] = "FloatRound";
    OperatorCode[OperatorCode["Floatsum"] = 61] = "Floatsum";
    OperatorCode[OperatorCode["FloatTruncate"] = 62] = "FloatTruncate";
    OperatorCode[OperatorCode["StringAsBytes"] = 64] = "StringAsBytes";
    OperatorCode[OperatorCode["StringAsFloat"] = 65] = "StringAsFloat";
    OperatorCode[OperatorCode["StringAsInteger"] = 66] = "StringAsInteger";
    OperatorCode[OperatorCode["StringLength"] = 67] = "StringLength";
    OperatorCode[OperatorCode["StringMatch"] = 68] = "StringMatch";
    OperatorCode[OperatorCode["StringParseJson"] = 69] = "StringParseJson";
    OperatorCode[OperatorCode["StringParseXML"] = 70] = "StringParseXML";
    OperatorCode[OperatorCode["StringAsBoolean"] = 71] = "StringAsBoolean";
    OperatorCode[OperatorCode["StringToLowerCase"] = 72] = "StringToLowerCase";
    OperatorCode[OperatorCode["StringToUpperCase"] = 73] = "StringToUpperCase";
    OperatorCode[OperatorCode["ArrayAsBytes"] = 80] = "ArrayAsBytes";
    OperatorCode[OperatorCode["ArrayCount"] = 81] = "ArrayCount";
    OperatorCode[OperatorCode["ArrayEvery"] = 82] = "ArrayEvery";
    OperatorCode[OperatorCode["ArrayFilter"] = 83] = "ArrayFilter";
    OperatorCode[OperatorCode["ArrayFlatten"] = 84] = "ArrayFlatten";
    OperatorCode[OperatorCode["ArrayGet"] = 85] = "ArrayGet";
    OperatorCode[OperatorCode["ArrayMap"] = 86] = "ArrayMap";
    OperatorCode[OperatorCode["ArrayReduce"] = 87] = "ArrayReduce";
    OperatorCode[OperatorCode["ArraySome"] = 88] = "ArraySome";
    OperatorCode[OperatorCode["ArraySort"] = 89] = "ArraySort";
    OperatorCode[OperatorCode["ArrayTake"] = 90] = "ArrayTake";
    OperatorCode[OperatorCode["MapEntries"] = 96] = "MapEntries";
    OperatorCode[OperatorCode["MapGet"] = 97] = "MapGet";
    OperatorCode[OperatorCode["MapKeys"] = 98] = "MapKeys";
    OperatorCode[OperatorCode["MapValues"] = 99] = "MapValues";
    OperatorCode[OperatorCode["BytesAsArray"] = 112] = "BytesAsArray";
    OperatorCode[OperatorCode["BytesAsBoolean"] = 113] = "BytesAsBoolean";
    OperatorCode[OperatorCode["BytesAsFloat"] = 114] = "BytesAsFloat";
    OperatorCode[OperatorCode["BytesAsInteger"] = 115] = "BytesAsInteger";
    OperatorCode[OperatorCode["BytesAsMap"] = 116] = "BytesAsMap";
    OperatorCode[OperatorCode["BytesAsString"] = 117] = "BytesAsString";
    OperatorCode[OperatorCode["BytesHash"] = 118] = "BytesHash";
    OperatorCode[OperatorCode["ResultGet"] = 128] = "ResultGet";
    OperatorCode[OperatorCode["ResultGetOr"] = 129] = "ResultGetOr";
    OperatorCode[OperatorCode["ResultIsOk"] = 130] = "ResultIsOk";
})(OperatorCode = exports.OperatorCode || (exports.OperatorCode = {}));
var MirArgumentKind;
(function (MirArgumentKind) {
    MirArgumentKind[MirArgumentKind["Array"] = 0] = "Array";
    MirArgumentKind[MirArgumentKind["Boolean"] = 1] = "Boolean";
    MirArgumentKind[MirArgumentKind["Bytes"] = 2] = "Bytes";
    MirArgumentKind[MirArgumentKind["Filter"] = 3] = "Filter";
    MirArgumentKind[MirArgumentKind["Float"] = 4] = "Float";
    MirArgumentKind[MirArgumentKind["Inner"] = 5] = "Inner";
    MirArgumentKind[MirArgumentKind["Integer"] = 6] = "Integer";
    MirArgumentKind[MirArgumentKind["Map"] = 7] = "Map";
    MirArgumentKind[MirArgumentKind["Mapper"] = 8] = "Mapper";
    MirArgumentKind[MirArgumentKind["Passthrough"] = 9] = "Passthrough";
    MirArgumentKind[MirArgumentKind["Reducer"] = 10] = "Reducer";
    MirArgumentKind[MirArgumentKind["Result"] = 11] = "Result";
    MirArgumentKind[MirArgumentKind["String"] = 12] = "String";
})(MirArgumentKind = exports.MirArgumentKind || (exports.MirArgumentKind = {}));
var BooleanOperatorName;
(function (BooleanOperatorName) {
    BooleanOperatorName["Negate"] = "negate";
    BooleanOperatorName["Match"] = "match";
    BooleanOperatorName["AsString"] = "asString";
})(BooleanOperatorName = exports.BooleanOperatorName || (exports.BooleanOperatorName = {}));
var IntegerOperatorName;
(function (IntegerOperatorName) {
    IntegerOperatorName["Absolute"] = "absolute";
    IntegerOperatorName["Power"] = "power";
    IntegerOperatorName["Sum"] = "sum";
    IntegerOperatorName["AsBytes"] = "asBytes";
    IntegerOperatorName["AsFloat"] = "asFloat";
    IntegerOperatorName["AsString"] = "asString";
    IntegerOperatorName["GreaterThan"] = "greaterThan";
    IntegerOperatorName["LessThan"] = "lessThan";
    IntegerOperatorName["Match"] = "match";
    IntegerOperatorName["Modulo"] = "modulo";
    IntegerOperatorName["Multiply"] = "multiply";
    IntegerOperatorName["Negate"] = "negate";
    IntegerOperatorName["Reciprocal"] = "reciprocal";
})(IntegerOperatorName = exports.IntegerOperatorName || (exports.IntegerOperatorName = {}));
var FloatOperatorName;
(function (FloatOperatorName) {
    FloatOperatorName["Absolute"] = "absolute";
    FloatOperatorName["AsBytes"] = "asBytes";
    FloatOperatorName["AsString"] = "asString";
    FloatOperatorName["Ceiling"] = "ceiling";
    FloatOperatorName["GreaterThan"] = "greaterThan";
    FloatOperatorName["LessThan"] = "lessThan";
    FloatOperatorName["Floor"] = "floor";
    FloatOperatorName["Modulo"] = "modulo";
    FloatOperatorName["Multiply"] = "multiply";
    FloatOperatorName["Negate"] = "negate";
    FloatOperatorName["Power"] = "power";
    FloatOperatorName["Sum"] = "sum";
    FloatOperatorName["Truncate"] = "truncate";
    FloatOperatorName["Reciprocal"] = "reciprocal";
    FloatOperatorName["Round"] = "round";
})(FloatOperatorName = exports.FloatOperatorName || (exports.FloatOperatorName = {}));
var StringOperatorName;
(function (StringOperatorName) {
    StringOperatorName["AsBytes"] = "asBytes";
    StringOperatorName["AsFloat"] = "asFloat";
    StringOperatorName["AsInteger"] = "asInteger";
    StringOperatorName["Length"] = "length";
    StringOperatorName["Match"] = "match";
    StringOperatorName["ParseJson"] = "parseJson";
    StringOperatorName["ParseXml"] = "parseXml";
    StringOperatorName["AsBoolean"] = "asBoolean";
    StringOperatorName["ToLowerCase"] = "toLowerCase";
    StringOperatorName["ToUpperCase"] = "toUpperCase";
})(StringOperatorName = exports.StringOperatorName || (exports.StringOperatorName = {}));
var ArrayOperatorName;
(function (ArrayOperatorName) {
    ArrayOperatorName["AsBytes"] = "asBytes";
    ArrayOperatorName["Count"] = "count";
    ArrayOperatorName["Every"] = "every";
    ArrayOperatorName["Filter"] = "filter";
    ArrayOperatorName["Flatten"] = "flatten";
    ArrayOperatorName["Get"] = "get";
    ArrayOperatorName["Map"] = "map";
    ArrayOperatorName["Reduce"] = "reduce";
    ArrayOperatorName["Some"] = "some";
    ArrayOperatorName["Sort"] = "sort";
    ArrayOperatorName["Take"] = "take";
})(ArrayOperatorName = exports.ArrayOperatorName || (exports.ArrayOperatorName = {}));
var MapOperatorName;
(function (MapOperatorName) {
    MapOperatorName["Entries"] = "entries";
    MapOperatorName["Get"] = "get";
    MapOperatorName["Keys"] = "keys";
    MapOperatorName["Values"] = "values";
})(MapOperatorName = exports.MapOperatorName || (exports.MapOperatorName = {}));
var BytesOperatorName;
(function (BytesOperatorName) {
    BytesOperatorName["AsArray"] = "asArray";
    BytesOperatorName["AsBoolean"] = "asBoolean";
    BytesOperatorName["AsFloat"] = "asFloat";
    BytesOperatorName["AsInteger"] = "asInteger";
    BytesOperatorName["AsMap"] = "asMap";
    BytesOperatorName["AsString"] = "asString";
    BytesOperatorName["Hash"] = "hash";
})(BytesOperatorName = exports.BytesOperatorName || (exports.BytesOperatorName = {}));
var ResultOperatorName;
(function (ResultOperatorName) {
    ResultOperatorName["Get"] = "get";
    ResultOperatorName["GetOr"] = "getOr";
    ResultOperatorName["IsOk"] = "isOk";
})(ResultOperatorName = exports.ResultOperatorName || (exports.ResultOperatorName = {}));
